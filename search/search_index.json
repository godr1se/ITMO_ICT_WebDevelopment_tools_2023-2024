{"config":{"lang":["ru"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435","text":""},{"location":"#_1","title":"\u041e\u0442\u0447\u0435\u0442\u044b","text":"<ul> <li>\u041f\u0435\u0440\u0432\u0430\u044f \u041b\u0430\u0431\u0430 \u041f\u0440\u0430\u043a\u0442\u0438\u043a\u0430</li> <li>\u041f\u0435\u0440\u0432\u0430\u044f \u041b\u0430\u0431\u0430</li> <li>\u0412\u0442\u043e\u0440\u0430\u044f \u041b\u0430\u0431\u0430</li> <li>\u0422\u0440\u0435\u0442\u044c\u044f \u041b\u0430\u0431\u0430</li> </ul>"},{"location":"#k33402","title":"\u0412\u044b\u043f\u043e\u043b\u043d\u0438\u043b \u0413\u043e\u0440\u0431\u0430\u0442\u043e\u0432 \u0414\u043c\u0438\u0442\u0440\u0438\u0439 K33402","text":""},{"location":"lab1_prac/","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u043a\u0438","text":"<p>\u041f\u043e\u0448\u0430\u0433\u043e\u0432\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043f\u0440\u043e\u0435\u043a\u0442 \u0438 \u043c\u0435\u0442\u043e\u0434\u044b, \u043e\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u0435 \u0432 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0435. \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u0434\u043b\u044f \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u043c\u043e\u0434\u0435\u043b\u0438 \u0438 API \u0434\u043b\u044f \u043f\u0440\u043e\u0444\u0435\u0441\u0441\u0438\u0439</p>"},{"location":"lab1_prac/#-1","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 - 1","text":""},{"location":"lab1_prac/#_2","title":"\u042d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b","text":"<pre><code>from fastapi import FastAPI\nfrom models import Warrior, RaceType, Profession, Skill\nfrom typing_extensions import TypedDict, List\n\napp = FastAPI()\n\ntemp_bd = {\n    \"warriors\": [\n        {\n            \"id\": 1,\n            \"race\": \"director\",\n            \"name\": \"\u041c\u0430\u0440\u0442\u044b\u043d\u043e\u0432 \u0414\u043c\u0438\u0442\u0440\u0438\u0439\",\n            \"level\": 12,\n            \"profession\": 1,\n            \"skills\": [\n                {\n                    \"id\": 1,\n                    \"name\": \"\u041a\u0443\u043f\u043b\u0435-\u043f\u0440\u043e\u0434\u0430\u0436\u0430 \u043a\u043e\u043c\u043f\u0440\u0435\u0441\u0441\u043e\u0440\u043e\u0432\",\n                    \"description\": \"\"\n                },\n                {\n                    \"id\": 2,\n                    \"name\": \"\u041e\u0446\u0435\u043d\u043a\u0430 \u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430\",\n                    \"description\": \"\"\n                }\n            ]\n        },\n        {\n            \"id\": 2,\n            \"race\": \"worker\",\n            \"name\": \"\u0410\u043d\u0434\u0440\u0435\u0439 \u041a\u043e\u0441\u044f\u043a\u0438\u043d\",\n            \"level\": 12,\n            \"profession\": 2,\n            \"skills\": []\n        }],\n\n    \"professions\": [\n        {\n            \"id\": 1,\n            \"title\": \"\u0412\u043b\u0438\u044f\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0447\u0435\u043b\u043e\u0432\u0435\u043a\",\n            \"description\": \"\u042d\u043a\u0441\u043f\u0435\u0440\u0442 \u043f\u043e \u0432\u0441\u0435\u043c \u0432\u043e\u043f\u0440\u043e\u0441\u0430\u043c\"\n        },\n        {\n            \"id\": 2,\n            \"title\": \"\u0414\u0435\u043b\u044c\u0444\u0438\u0441\u0442-\u0433\u0440\u0435\u0431\u0435\u0446\",\n            \"description\": \"\u0423\u0432\u0430\u0436\u0430\u0435\u043c\u044b\u0439 \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\"\n        }\n    ]\n}\n\n\n@app.get(\"/warriors_list\")\ndef warriors_list() -&gt; List[Warrior]:\n    warriors = temp_bd[\"warriors\"]\n    return warriors\n\n\n@app.get(\"/warrior/{warrior_id}\")\ndef warriors_get(warrior_id: int) -&gt; List[Warrior]:\n    warriors = temp_bd[\"warriors\"]\n    return [warrior for warrior in warriors if warrior.get(\"id\") == warrior_id]\n\n\n@app.post(\"/warrior\")\ndef warriors_create(warrior: Warrior) -&gt; TypedDict('Response', {\"status\": int, \"data\": Warrior}):\n    warrior_to_append = warrior.model_dump()\n    temp_bd[\"warriors\"].append(warrior_to_append)\n    return {\"status\": 200, \"data\": warrior}\n\n\n@app.delete(\"/warrior/delete{warrior_id}\")\ndef warrior_delete(warrior_id: int):\n    warriors = temp_bd[\"warriors\"]\n    for i, warrior in enumerate(warriors):\n        if warrior.get(\"id\") == warrior_id:\n            temp_bd[\"warriors\"].pop(i)\n            break\n    return {\"status\": 201, \"message\": \"deleted\"}\n\n\n@app.put(\"/warrior{warrior_id}\")\ndef warrior_update(warrior_id: int, warrior: Warrior) -&gt; List[Warrior]:\n    warriors = temp_bd[\"warriors\"]\n    for war in warriors:\n        if war.get(\"id\") == warrior_id:\n            warrior_to_append = warrior.model_dump()\n            temp_bd[\"warriors\"].remove(war)\n            temp_bd[\"warriors\"].append(warrior_to_append)\n    return temp_bd[\"warriors\"]\n\n\n@app.get(\"/professions_list\")\ndef professions_list() -&gt; List[Profession]:\n    professions = temp_bd[\"professions\"]\n    return professions\n\n\n@app.get(\"/profession/{profession_id}\")\ndef professions_get(profession_id: int) -&gt; List[Profession]:\n    professions = temp_bd[\"professions\"]\n    return [profession for profession in professions if profession.get(\"id\") == profession_id]\n\n\n@app.post(\"/profession\")\ndef profession_create(profession: Profession) -&gt; TypedDict('Response', {\"status\": int, \"data\": Profession}):\n    profession_to_append = profession.model_dump()\n    temp_bd[\"professions\"].append(profession_to_append)\n    return {\"status\": 200, \"data\": profession}\n\n\n@app.put(\"/profession{profession_id}\")\ndef profession_update(profession_id: int, profession: Profession) -&gt; List[Profession]:\n    professions = temp_bd[\"professions\"]\n    for prof in professions:\n        if prof.get(\"id\") == profession_id:\n            profession_to_append = profession.model_dump()\n            temp_bd[\"professions\"].remove(prof)\n            temp_bd[\"professions\"].append(profession_to_append)\n    return temp_bd[\"professions\"]\n\n\n@app.delete(\"/profession/delete{profession_id}\")\ndef profession_delete(profession_id: int):\n    professions = temp_bd[\"professions\"]\n    for i, profession in enumerate(professions):\n        if profession.get(\"id\") == profession_id:\n            temp_bd[\"professions\"].pop(i)\n            break\n    return {\"status\": 201, \"message\": \"deleted\"}\n</code></pre>"},{"location":"lab1_prac/#_3","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0440\u0430\u0431\u043e\u0442\u044b","text":"<p>\u0418\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c  FastAPI \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u043a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f, \u043c\u043e\u0434\u0435\u043b\u0438 \u0438 typedict \u0441 List temp_bd - \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u043a\u0430\u043a \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u0431\u0430\u0437\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f, \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0438\u043b\u0438 \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0430 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u043f\u0440\u043e\u0444\u0435\u0441\u0441\u0438\u044f\u0445</p> <p>     \u0412\u044b\u0432\u043e\u0436\u0443 \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u0440\u043e\u0444\u0435\u0441\u0441\u0438\u0439</p> <p>     \u0412\u044b\u0432\u043e\u0436\u0443 \u043f\u0440\u043e\u0444\u0435\u0441\u0441\u0438\u044e \u043f\u043e id</p> <p>     \u0421\u043e\u0437\u0434\u0430\u044e \u043d\u043e\u0432\u0443\u044e \u043f\u0440\u043e\u0444\u0435\u0441\u0441\u0438\u044e</p> <p>     \u0421\u043e\u0437\u0434\u0430\u0435\u044e \u043d\u043e\u0432\u043e\u0433\u043e \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0430</p> <p>     \u041c\u0435\u043d\u044f\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e</p> <p>      \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 </p>"},{"location":"lab1_prac/#-2","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 - 2","text":"<p>\u0421\u043e\u0437\u0434\u0430\u0442\u044c API \u0438 \u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u043b\u044f \u0443\u043c\u0435\u043d\u0438\u0439 \u0432\u043e\u0438\u043d\u043e\u0432 \u0438 \u0438\u0445 \u0430\u0441\u0441\u043e\u0446\u0438\u0430\u0442\u0438\u0432\u043d\u043e\u0439 \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0438, \u0432\u043b\u043e\u0436\u0435\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0442\u044c \u0443\u043c\u0435\u043d\u0438\u044f \u043f\u0440\u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u0435 \u0432\u043e\u0438\u043d\u0430</p>"},{"location":"lab1_prac/#_4","title":"\u041c\u043e\u0434\u0435\u043b\u0438","text":"<pre><code>from enum import Enum\nfrom typing import Optional, List\nfrom sqlmodel import SQLModel, Field, Relationship\n\n\nclass RaceType(Enum):\n    director = \"director\"\n    worker = \"worker\"\n    junior = \"junior\"\n\n\nclass SkillWarriorLink(SQLModel, table=True):\n    skill_id: Optional[int] = Field(default=None, foreign_key=\"skill.id\", primary_key=True)\n    warrior_id: Optional[int] = Field(default=None, foreign_key=\"warrior.id\", primary_key=True)\n\n\nclass SkillDefault(SQLModel):\n    name: str\n    description: Optional[str] = \"\"\n\n\nclass Skill(SkillDefault, table=True):\n    id: int = Field(default=None, primary_key=True)\n    warriors: Optional[List[\"Warrior\"]] = Relationship(back_populates=\"skills\", link_model=SkillWarriorLink)\n\n\nclass ProfessionDefault(SQLModel):\n    title: str\n    description: str\n\n\nclass Profession(ProfessionDefault, table=True):\n    id: int = Field(default=None, primary_key=True)\n    warriors_prof: List[\"Warrior\"] = Relationship(back_populates=\"profession\")\n\n\nclass WarriorDefault(SQLModel):\n    race: RaceType\n    name: str\n    level: int\n    profession_id: Optional[int] = Field(default=None, foreign_key=\"profession.id\")\n\n\nclass Warrior(WarriorDefault, table=True):\n    id: int = Field(default=None, primary_key=True)\n    profession: Optional[Profession] = Relationship(back_populates=\"warriors_prof\")\n    skills: Optional[List[Skill]] = Relationship(back_populates=\"warriors\", link_model=SkillWarriorLink)\n\n\nclass WarriorProfessions(WarriorDefault):\n    profession: Optional[Profession] = None\n    skills: Optional[List[Skill]] = None\n\n\nclass SkillWarrior(SkillDefault):\n    warriors: Optional[List[Warrior]] = None\n</code></pre>"},{"location":"lab1_prac/#_5","title":"\u042d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b","text":"<pre><code>from fastapi import FastAPI, Depends, HTTPException\nfrom typing_extensions import TypedDict, List\nfrom sqlmodel import select\n\nfrom connection import init_db, get_session\nfrom models import *\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    init_db()\n\n\n@app.post(\"/warrior\")\ndef warriors_create(warrior: WarriorDefault, session=Depends(get_session)) -&gt; TypedDict('Response', {\"status\": int, \"data\": Warrior}):\n    warrior = Warrior.model_validate(warrior)\n    session.add(warrior)\n    session.commit()\n    session.refresh(warrior)\n    return {\"status\": 200, \"data\": warrior}\n\n\n@app.get(\"/warriors_list\")\ndef warriors_list(session=Depends(get_session)) -&gt; List[Warrior]:\n    return session.exec(select(Warrior)).all()\n\n\n@app.get(\"/warrior/{warrior_id}\", response_model=WarriorProfessions)\ndef warriors_get(warrior_id: int, session=Depends(get_session)) -&gt; WarriorProfessions:\n    return session.get(Warrior, warrior_id)\n\n\n@app.patch(\"/warrior{warrior_id}\")\ndef warrior_update(warrior_id: int, warrior: WarriorDefault, session=Depends(get_session)) -&gt; Warrior:\n    db_warrior = session.get(Warrior, warrior_id)\n    if not db_warrior:\n        raise HTTPException(status_code=404, detail=\"Warrior not found\")\n    warrior_data = warrior.model_dump(exclude_unset=True)\n    for key, value in warrior_data.items():\n        setattr(db_warrior, key, value)\n    session.add(db_warrior)\n    session.commit()\n    session.refresh(db_warrior)\n    return db_warrior\n\n\n@app.delete(\"/warrior/delete{warrior_id}\")\ndef warrior_delete(warrior_id: int, session=Depends(get_session)):\n    warrior = session.get(Warrior, warrior_id)\n    if not warrior:\n        raise HTTPException(status_code=404, detail=\"Warrior not found\")\n    session.delete(warrior)\n    session.commit()\n    return {\"ok\": True}\n\n\n@app.get(\"/professions_list\")\ndef professions_list(session=Depends(get_session)) -&gt; List[Profession]:\n    return session.exec(select(Profession)).all()\n\n\n@app.get(\"/profession/{profession_id}\")\ndef profession_get(profession_id: int, session=Depends(get_session)) -&gt; Profession:\n    return session.get(Profession, profession_id)\n\n\n@app.post(\"/profession\")\ndef profession_create(prof: ProfessionDefault, session=Depends(get_session)) -&gt; TypedDict('Response', {\"status\": int, \"data\": Profession}):\n    prof = Profession.model_validate(prof)\n    session.add(prof)\n    session.commit()\n    session.refresh(prof)\n    return {\"status\": 200, \"data\": prof}\n\n\n@app.get(\"/skills_list\")\ndef skills_list(session=Depends(get_session)) -&gt; List[Skill]:\n    return session.exec(select(Skill)).all()\n\n\n@app.get(\"/skills/{skill_id}\", response_model=Skill)\ndef skill_get(skill_id: int, session=Depends(get_session)) -&gt; Skill:\n    return session.get(Skill, skill_id)\n\n\n@app.post('/skill')\ndef skill_create(skill: SkillDefault, session=Depends(get_session)) -&gt; TypedDict('Response', {\"status\": int, \"data\": Skill}):\n    skill = Skill.model_validate(skill)\n    session.add(skill)\n    session.commit()\n    session.refresh(skill)\n    return {\"status\": 200, \"data\": skill}\n\n\n@app.patch('/skill/{skill_id}')\ndef skill_update(skill_id: int, skill: SkillDefault, session=Depends(get_session)) -&gt; Skill:\n    db_skill = session.get(Skill, skill_id)\n    if not db_skill:\n        raise HTTPException(status_code=404, detail=\"Skill not found\")\n    skill_data = skill.model_dump(exclude_unset=True)\n    for key, value in skill_data.items():\n        setattr(db_skill, key, value)\n    session.add(db_skill)\n    session.commit()\n    session.refresh(db_skill)\n    return db_skill\n\n\n@app.delete(\"/skill/delete{skill_id}\")\ndef skill_delete(skill_id: int, session=Depends(get_session)):\n    skill = session.get(Skill, skill_id)\n    if not skill:\n        raise HTTPException(status_code=404, detail=\"Skill not found\")\n    session.delete(skill)\n    session.commit()\n    return {\"ok\": True}\n\n\n@app.get(\"/skillwarriorlink_list\")\ndef skillwarriorlink_list(session=Depends(get_session)) -&gt; List[SkillWarriorLink]:\n    return session.exec(select(SkillWarriorLink)).all()\n\n\n@app.get(\"/skillwarriorlink/{skill_id}/{warrior_id}\")\ndef skillwarriorlink_get(skill_id: int, warrior_id: int, session=Depends(get_session)) -&gt; SkillWarriorLink:\n    return session.get(SkillWarriorLink, (skill_id, warrior_id))\n\n\n@app.post('/skillwarriorlink')\ndef skillwarriorlink_create(skillwarriorlink: SkillWarriorLink, session=Depends(get_session)) -&gt; TypedDict('Response', {\"status\": int, \"data\": SkillWarriorLink}):\n    session.add(skillwarriorlink)\n    session.commit()\n    session.refresh(skillwarriorlink)\n    return {\"status\": 200, \"data\": skillwarriorlink}\n</code></pre>"},{"location":"lab1_prac/#_6","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0440\u0430\u0431\u043e\u0442\u044b","text":"<p>\u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438, \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f, \u0438\u043c\u043f\u043e\u0440\u0442 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 PgAdmin</p> <p> \u0421\u043e\u0437\u0434\u0430\u044e \u043f\u0440\u043e\u0444\u0435\u0441\u0441\u0438\u044e</p> <p> \u0421\u043e\u0437\u0434\u0430\u044e \u0441\u043a\u0438\u043b\u043b</p> <p> \u041f\u0440\u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u0435 \u0432\u043e\u0439\u043d\u0430 \u0441\u043a\u0438\u043b\u043b \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u0442\u0441\u044f \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u043e</p>"},{"location":"lab1_prac/#-3","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 - 3","text":""},{"location":"lab1_prac/#env","title":".env","text":"<pre><code>DB_ADMIN = postgresql://postgres:123@localhost/warriors_db\n</code></pre>"},{"location":"lab1_prac/#alembicini","title":"alembic.ini","text":"<p>\u041a\u0430\u043a \u044f \u043f\u0435\u0440\u0435\u0434\u0430\u043b URL \u0431\u0430\u0437\u044b \u0432 alembic.ini \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e .env </p> <pre><code>sqlalchemy.url = os.getenv('DB_ADMIN')\n</code></pre>"},{"location":"lab1_prac/#connectionspy","title":"connections.py","text":"<p>\u041a\u0430\u043a \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0441 \u0411\u0414</p> <pre><code>from sqlmodel import SQLModel, Session, create_engine\n\nimport os\nfrom dotenv import load_dotenv\n\nload_dotenv()\ndb_url = os.getenv('DB_ADMIN')\nengine = create_engine(db_url, echo=True)\n</code></pre>"},{"location":"lab1_prac/#_7","title":"\u0412\u044b\u0432\u043e\u0434","text":"<p>\u0412 \u0445\u043e\u0434\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u044f \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043b \u0432\u0441\u0435 \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u044f, \u043e\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u0435 \u0432 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0435, \u0447\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u0438\u043b\u043e \u043f\u043e\u0432\u044b\u0441\u0438\u0442\u044c \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043e\u0434\u0430.  \u0410 \u0442\u0430\u043a\u0436\u0435 \u0440\u0430\u0437\u043e\u0431\u0440\u0430\u043b\u0441\u044f \u0441 \u0440\u0430\u0431\u043e\u0442\u043e\u0439 FastAPI.</p>"},{"location":"lab1_task/","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 - 1","text":""},{"location":"lab1_task/#_1","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435","text":"<p>\u041d\u0430\u0443\u0447\u0438\u0442\u0441\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u044b\u0432\u0430\u0442\u044c \u043f\u043e\u043b\u043d\u043e\u0446\u0435\u043d\u043d\u043e\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0430 FastAPI \u0441 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435\u043c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0441\u0440\u0435\u0434\u0441\u0442\u0432 \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a.</p> <p>\u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u0439\u0442\u0435 \u043f\u0440\u043e\u0441\u0442\u0443\u044e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443-\u0442\u0430\u0439\u043c-\u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043c\u043e\u0436\u0435\u0442 \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0432\u0430\u0448\u0438\u043c \u0432\u0440\u0435\u043c\u0435\u043d\u0435\u043c \u0438 \u0437\u0430\u0434\u0430\u0447\u0430\u043c\u0438. \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0442\u044c \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0438 \u0441 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435\u043c, \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0442\u044c \u0438\u043c \u0441\u0440\u043e\u043a\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0438 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u044b, \u0430 \u0442\u0430\u043a\u0436\u0435 \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u0442\u044c \u0437\u0430\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u043d\u0430 \u043a\u0430\u0436\u0434\u0443\u044e \u0437\u0430\u0434\u0430\u0447\u0443.</p> <p>\u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043c\u043e\u0433\u0443\u0442 \u0432\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u0432 \u0441\u0435\u0431\u044f \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u044f \u043e \u043f\u0440\u0438\u0431\u043b\u0438\u0436\u0435\u043d\u0438\u0438 \u043a \u0434\u0435\u0434\u043b\u0430\u0439\u043d\u0430\u043c, \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0435\u0436\u0435\u0434\u043d\u0435\u0432\u043d\u043e\u0433\u043e \u0440\u0430\u0441\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0438 \u0430\u043d\u0430\u043b\u0438\u0437 \u0432\u0440\u0435\u043c\u0435\u043d\u0438, \u0437\u0430\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u043e\u0433\u043e \u043d\u0430 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438.  </p>"},{"location":"lab1_task/#modelspy","title":"models.py","text":"<pre><code>from typing import List, Optional\nfrom sqlmodel import SQLModel, Field, Relationship\nfrom datetime import datetime\n\nclass User(SQLModel, table=True):\n    id: int = Field(default=None, primary_key=True)\n    username: str\n    password: Optional[str] = None\n    hashed_password: str\n    task_infos: List[\"TaskInfo\"] = Relationship(back_populates=\"user\")\n\nclass Task(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    title: str\n    description: str\n    task_infos: List[\"TaskInfo\"] = Relationship(back_populates=\"task\")\n    tags: List[\"TaskTagLink\"] = Relationship(back_populates=\"task\")\n    time_logs: List[\"TimeLog\"] = Relationship(back_populates=\"task\")\n\nclass TaskInfo(SQLModel, table=True):\n    task_id: int = Field(foreign_key=\"task.id\", primary_key=True)\n    user_id: int = Field(foreign_key=\"user.id\", primary_key=True)\n    priority: Optional[int] = None\n    deadline: Optional[datetime] = None\n    task: Task = Relationship(back_populates=\"task_infos\")\n    user: User = Relationship(back_populates=\"task_infos\")\n\nclass Tag(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    description: Optional[str] = None\n    tasks: List[\"TaskTagLink\"] = Relationship(back_populates=\"tag\")\n\nclass TaskTagLink(SQLModel, table=True):\n    task_id: int = Field(foreign_key=\"task.id\", primary_key=True)\n    tag_id: int = Field(foreign_key=\"tag.id\", primary_key=True)\n    task: Task = Relationship(back_populates=\"tags\")\n    tag: Tag = Relationship(back_populates=\"tasks\")\n\nclass TimeLog(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    task_id: int = Field(foreign_key=\"task.id\")\n    start_time: datetime\n    end_time: datetime\n    task: Task = Relationship(back_populates=\"time_logs\")\n</code></pre> <p>\u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u044f \u0441\u043e\u0437\u0434\u0430\u043b \u0411\u0414 \u0434\u043b\u044f \u0441\u0432\u043e\u0435\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0432 \u043d\u0451\u0451 \u0432\u043e\u0448\u043b\u0438 \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0438: User, Task, TaskInfo - \u0430\u0441\u0441\u043e\u0446\u0438\u0430\u0442\u0438\u0432\u043d\u0430\u044f \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u044c, Tag, TaskTagLink, TimeLog. </p>"},{"location":"lab1_task/#jwt-","title":"\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0441 JWT-\u0442\u043e\u043a\u0435\u043d\u043e\u043c","text":"<pre><code>import jwt\nimport bcrypt\nfrom fastapi import APIRouter, Depends, HTTPException, Header\nfrom typing_extensions import Optional\nimport os\nfrom dotenv import load_dotenv, find_dotenv\nfrom sqlmodel import select\nfrom datetime import datetime, timedelta\n\nfrom connection import get_session\nfrom models import User\n\n\nload_dotenv(find_dotenv('..'))\nsecret_key = os.getenv('SECRET_KEY')\n\n\ndef hash_password(password: str) -&gt; str:\n    return bcrypt.hashpw(password.encode(), bcrypt.gensalt()).decode()\n\ndef verify_password(password: str, hashed_password: str) -&gt; bool:\n    return bcrypt.checkpw(password.encode(), hashed_password.encode())\n\n\ndef encode_token(username: str) -&gt; str:\n    payload = {\n        'exp': datetime.utcnow() + timedelta(hours=12),\n        'iat': datetime.utcnow(),\n        'sub': username\n    }\n    return jwt.encode(payload, secret_key, algorithm='HS256')\n\ndef decode_token(token: str) -&gt; str:\n    try:\n        payload = jwt.decode(token, secret_key, algorithms=['HS256'])\n        return payload['sub']\n    except jwt.ExpiredSignatureError:\n        raise HTTPException(status_code=401, detail='Token expired')\n    except jwt.InvalidTokenError:\n        raise HTTPException(status_code=401, detail='Invalid token')\n\n\nrouter = APIRouter()\n\n\n@router.post(\"/registration\", tags=[\"auth\"])\ndef registration(user: User, session=Depends(get_session)) -&gt; dict:\n    if user.password is None:\n        raise HTTPException(status_code=400, detail='Password must be provided')\n\n\n    user.hashed_password = hash_password(user.password)\n    user.password = None\n\n    session.add(user)\n    session.commit()\n    session.refresh(user)\n\n    return {\"status\": 200, \"data\": user}\n\n\n@router.post(\"/login\", tags=[\"auth\"])\ndef login(username: str, password: str, session=Depends(get_session)) -&gt; str:\n    query = select(User).where(User.username == username)\n    db_user = session.exec(query).one_or_none()\n    if not db_user:\n        raise HTTPException(status_code=401, detail='Invalid username')\n\n    if not verify_password(password, db_user.hashed_password):\n        raise HTTPException(status_code=401, detail='Invalid password')\n\n    token = encode_token(db_user.username)\n    return token\n\n\n@router.get(\"/user/auth/token\", response_model=User, tags=[\"auth\"])\ndef get_user_by_token(token: Optional[str] = Header(None), session=Depends(get_session)) -&gt; User:\n    if not token:\n        raise HTTPException(status_code=401, detail='Unauthorized')\n\n    token = token\n    user_name = decode_token(token)\n    query = select(User).where(User.username == user_name)\n    user = session.exec(query).one_or_none()\n    if not user:\n        raise HTTPException(status_code=404, detail=\"User not found\")\n    return user\n</code></pre> <p>\u0414\u043b\u044f \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u043d\u0443\u0436\u043d\u043e \u0431\u044b\u043b\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044e \u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044e, \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044e JWT-\u0442\u043e\u043a\u0435\u043d\u043e\u0432, \u0410\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044e \u043f\u043e JWT-\u0442\u043e\u043a\u0435\u043d\u0443, \u0425\u044d\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0430\u0440\u043e\u043b\u0435\u0439.</p> <p></p> <p>CRUD-\u044b</p> <p></p> <p>Login</p> <p></p> <p>\u0410\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u043f\u043e \u0442\u043e\u043a\u0435\u043d\u0443</p> <p>\u0412\u044b\u0432\u043e\u0434 \u043a \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u043d\u043e\u043c\u0443 \u0437\u0430\u0434\u0430\u043d\u0438\u044e</p> <p>\u0414\u043e\u0441\u0442\u0438\u0436\u0435\u043d\u0438\u044f \u0432 \u043f\u0440\u043e\u0434\u0435\u043b\u0430\u043d\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435:</p> <ol> <li>\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0438 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445</li> <li>\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 API \u0441 CRUD-\u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f\u043c\u0438</li> <li>\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0439 \u0441 Alembic</li> <li>\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f JWT-\u0442\u043e\u043a\u0435\u043d\u043e\u0432 \u0438 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u043f\u043e \u043d\u0438\u043c</li> </ol> <p>\u0417\u0430\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435</p> <p>\u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u043f\u043e\u0437\u0432\u043e\u043b\u0438\u043b\u043e \u043d\u0435 \u0442\u043e\u043b\u044c\u043a\u043e \u0437\u0430\u043a\u0440\u0435\u043f\u0438\u0442\u044c \u0442\u0435\u043e\u0440\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0437\u043d\u0430\u043d\u0438\u044f,  \u043d\u043e \u0438 \u043f\u0440\u0438\u043e\u0431\u0440\u0435\u0441\u0442\u0438 \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043d\u0430\u0432\u044b\u043a\u0438 \u0432 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u044b\u0445 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439.  \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b \u0434\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0438\u0440\u0443\u0435\u0442 \u0441\u043f\u043e\u0441\u043e\u0431\u043d\u043e\u0441\u0442\u044c \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u044b\u0435 \u0438 \u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u0443\u0435\u043c\u044b\u0435 \u0432\u0435\u0431-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f,  \u0447\u0442\u043e \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432\u0430\u0436\u043d\u044b\u043c \u0448\u0430\u0433\u043e\u043c \u0432 \u043d\u0430\u0448\u0435\u043c \u043f\u0440\u043e\u0444\u0435\u0441\u0441\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u043c \u0440\u0430\u0437\u0432\u0438\u0442\u0438\u0438. \u0423\u0432\u0435\u0440\u0435\u043d, \u0447\u0442\u043e \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u043d\u0430\u0432\u044b\u043a\u0438 \u0431\u0443\u0434\u0443\u0442 \u043f\u043e\u043b\u0435\u0437\u043d\u044b \u0432 \u0431\u0443\u0434\u0443\u0449\u0438\u0445 \u043f\u0440\u043e\u0435\u043a\u0442\u0430\u0445 \u0438 \u0437\u0430\u0434\u0430\u0447\u0430\u0445.</p>"},{"location":"lab2/","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 - 2","text":""},{"location":"lab2/#-1","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 - 1","text":"<p>\u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0442\u0440\u0438 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043d\u0430 Python, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0438\u0435 \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432: threading,  multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0440\u0435\u0448\u0430\u0442\u044c \u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0441\u0443\u043c\u043c\u0443 \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u0435\u043b \u043e\u0442 1 \u0434\u043e 1000000.  \u0420\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447 \u0434\u043b\u044f \u0443\u0441\u043a\u043e\u0440\u0435\u043d\u0438\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f.</p>"},{"location":"lab2/#threading","title":"threading","text":"<pre><code>import threading\nimport time\n\ndef calculate_sum(start, finish, result_list, index):\n    total = 0\n    for i in range(start, finish + 1):\n        total += i\n    result_list[index] = total\n\ndef threading_count():\n    threads = []\n    chunks = 5\n    total = 1000000\n    chunk_size = total // chunks\n    results = [0] * chunks\n\n    start_time = time.time()\n    for i in range(chunks):\n        start = i * chunk_size + 1\n        end = (i + 1) * chunk_size\n        thread = threading.Thread(target=calculate_sum, args=(start, end, results, i))\n        threads.append(thread)\n        thread.start()\n\n    for thread in threads:\n        thread.join()\n\n    end_time = time.time()\n\n    final_result = sum(results)\n\n    print(f\"Result: {final_result}\")\n    print(f\"Threading time: {end_time - start_time:.4f} seconds\")\n\nif __name__ == \"__main__\":\n    threading_count()\n</code></pre> <pre><code>\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0440\u0430\u0431\u043e\u0442\u044b -  \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u043c \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u0447\u0435\u0440\u0435\u0437 threading \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u044f \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0442\u043e\u043a\u043e\u0432 \u0432 \u043e\u0434\u043d\u043e\u043c \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435\n</code></pre>"},{"location":"lab2/#multiprocessing","title":"multiprocessing","text":"<pre><code>import multiprocessing\nimport time\n\ndef calculate_sum(start, finish, result_list, index):\n    total = 0\n    for i in range(start, finish + 1):\n        total += i\n    result_list[index] = total  # \u0421\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0432 \u043e\u0431\u0449\u0438\u0439 \u0441\u043f\u0438\u0441\u043e\u043a\n\ndef multiprocessing_count():\n    processes = []\n    chunks = 5\n    total = 1000000\n    chunk_size = total // chunks\n\n    # \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c Manager \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0441\u043f\u0438\u0441\u043a\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d \u043c\u0435\u0436\u0434\u0443 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430\u043c\u0438\n    with multiprocessing.Manager() as manager:\n        results = manager.list([0] * chunks)\n\n        start_time = time.time()\n        for i in range(chunks):\n            start = i * chunk_size + 1\n            end = (i + 1) * chunk_size\n            process = multiprocessing.Process(target=calculate_sum, args=(start, end, results, i))\n            processes.append(process)\n            process.start()\n\n        for process in processes:\n            process.join()\n\n        end_time = time.time()\n\n        final_result = sum(results)\n        print(f\"Result: {final_result}\")\n        print(f\"Multiprocessing time: {end_time - start_time:.4f} seconds\")\n\nif __name__ == \"__main__\":\n    multiprocessing_count()\n</code></pre> <p>\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0440\u0430\u0431\u043e\u0442\u044b - \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u043c \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0447\u0435\u0440\u0435\u0437 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u044b</p>"},{"location":"lab2/#async","title":"async","text":"<pre><code>import asyncio\nimport time\n\ndef calculate_sum(start, finish, result_list, index):\n    total = 0\n    for i in range(start, finish + 1):\n        total += i\n    result_list[index] = total\n\nasync def async_calculate_sum(start, end, result_list, index):\n    calculate_sum(start, end, result_list, index)\n\nasync def asyncio_example():\n    tasks = []\n    chunks = 5\n    total = 1000000\n    chunk_size = total // chunks\n    results = [0] * chunks\n\n    start_time = time.time()\n    for i in range(chunks):\n        start = i * chunk_size + 1\n        end = (i + 1) * chunk_size\n        task = asyncio.create_task(async_calculate_sum(start, end, results, i))\n        tasks.append(task)\n\n    await asyncio.gather(*tasks)\n    end_time = time.time()\n\n    final_result = sum(results)\n    print(f\"Result: {final_result}\")\n    print(f\"Asyncio time: {end_time - start_time:.4f} seconds\")\n\nif __name__ == \"__main__\":\n    asyncio.run(asyncio_example())\n</code></pre> <p>\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0440\u0430\u0431\u043e\u0442\u044b -  \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u043c \u043c\u0443\u043b\u044c\u0442\u0438\u043f\u043e\u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u0447\u0435\u0440\u0435\u0437 async \u043f\u0440\u0438\u043e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432 \u0438 \u0432\u043e\u0437\u0440\u0430\u0449\u0430\u044f\u0441\u044c \u043a \u043d\u0438\u043c \u043f\u043e\u0442\u043e\u043c</p>"},{"location":"lab2/#_1","title":"\u0412\u044b\u0432\u043e\u0434","text":"<p>\u0412\u0440\u0435\u043c\u044f</p> <ul> <li> <p>threading - 0.0470\u0441\u0435\u043a</p> </li> <li> <p>multiprocessing - 0.2260\u0441\u0435\u043a</p> </li> <li> <p>async - 0.0406\u0441\u0435\u043a</p> </li> </ul> <p>Threading \u043b\u0443\u0447\u0448\u0435 \u0432\u0441\u0435\u0433\u043e \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0434\u043b\u044f I/O-\u043e\u0440\u0438\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447, \u043d\u043e \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d GIL.</p> <p>Multiprocessing \u0438\u0434\u0435\u0430\u043b\u0435\u043d \u0434\u043b\u044f CPU-\u043e\u0440\u0438\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447 \u0438 \u043d\u0435 \u043f\u043e\u0434\u0432\u0435\u0440\u0436\u0435\u043d GIL, \u043d\u043e \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u0431\u043e\u043b\u044c\u0448\u0435 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432. </p> <p>Async \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u044b\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 I/O \u0431\u0435\u0437 \u0431\u043b\u043e\u043a\u0438\u0440\u043e\u0432\u043e\u043a, \u043d\u043e \u043d\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447, \u0442\u0440\u0435\u0431\u0443\u044e\u0449\u0438\u0445 \u0438\u043d\u0442\u0435\u043d\u0441\u0438\u0432\u043d\u044b\u0445 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439.</p>"},{"location":"lab2/#-2_1","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 - 2","text":"<p>\u041d\u0430\u043f\u0438c\u0430\u0442\u044c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u043d\u0430 Python \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0441 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445  \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432 threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043f\u0430\u0440\u0441\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u0441 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0432\u0435\u0431-\u0441\u0430\u0439\u0442\u043e\u0432, \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u0438\u0445 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445.</p>"},{"location":"lab2/#threading_1","title":"threading","text":"<pre><code>import threading\nimport requests\nfrom bs4 import BeautifulSoup\nimport time\nfrom database import get_session, Site, init_db\n\ninit_db() \n\ndef parse_and_save(url):\n    session = get_session()\n    response = requests.get(url)\n    soup = BeautifulSoup(response.text, 'html.parser')\n    title = soup.find('title').text\n    site = Site(url=url, title=title, method='GET')\n    session.add(site)\n    session.commit()\n    session.close()\n    print(f\"{url} - {title}\")\n\ndef threading_example():\n    urls = [\n        'https://www.example.com',\n        'https://www.google.com',\n        'https://www.python.org',\n        'https://www.stackoverflow.com',\n        'https://www.github.com'\n    ]\n    threads = []\n\n    for url in urls:\n        thread = threading.Thread(target=parse_and_save, args=(url,))\n        threads.append(thread)\n        thread.start()\n\n    for thread in threads:\n        thread.join()\n\nif __name__ == \"__main__\":\n    start_time = time.time()\n    threading_example()\n    end_time = time.time()\n    print(f\"Threading time: {end_time - start_time:.4f} seconds\")\n</code></pre>"},{"location":"lab2/#multiprocessing_1","title":"multiprocessing","text":"<pre><code>import multiprocessing\nimport requests\nfrom bs4 import BeautifulSoup\nimport time\nfrom database import get_session, Site, init_db\n\ninit_db()  # Initialize the database\n\ndef parse_and_save(url):\n    session = get_session()\n    response = requests.get(url)\n    soup = BeautifulSoup(response.text, 'html.parser')\n    title = soup.find('title').text\n    site = Site(url=url, title=title, method='GET')\n    session.add(site)\n    session.commit()\n    session.close()\n    print(f\"{url} - {title}\")\n\ndef multiprocessing_example():\n    urls = [\n        'https://www.example.com',\n        'https://www.google.com',\n        'https://www.python.org',\n        'https://www.stackoverflow.com',\n        'https://www.github.com'\n    ]\n\n    with multiprocessing.Pool() as pool:\n        pool.map(parse_and_save, urls)\n\nif __name__ == \"__main__\":\n    start_time = time.time()\n    multiprocessing_example()\n    end_time = time.time()\n    print(f\"Multiprocessing time: {end_time - start_time:.4f} seconds\")\n</code></pre>"},{"location":"lab2/#async_1","title":"async","text":"<pre><code>import asyncio\nimport aiohttp\nfrom bs4 import BeautifulSoup\nimport time\nfrom database import get_session, Site, init_db\n\ninit_db()\n\nasync def parse_and_save_async(url: str) -&gt; None:\n    async with aiohttp.ClientSession() as session:\n            response = await fetch_page(session, url)\n            soup = BeautifulSoup(response, 'html.parser')\n            title = soup.title.string\n            session = get_session()\n            site = Site(url=url, title=title, method='async')\n            session.add(site)\n            session.commit()\n            session.refresh(site)\n\n            print(f\"{url} - {title}\")\n\n\nasync def fetch_page(session: aiohttp.ClientSession, url: str) -&gt; str:\n    async with session.get(url, ssl=False) as response:\n        return await response.text()\n\nasync def asyncio_example():\n    urls = [\n        'https://www.example.com',\n        'https://www.google.com',\n        'https://www.python.org',\n        'https://www.stackoverflow.com',\n        'https://www.github.com'\n    ]\n\n    tasks = [parse_and_save_async(url) for url in urls]\n    await asyncio.gather(*tasks)\n\nif __name__ == \"__main__\":\n    start_time = time.time()\n    asyncio.run(asyncio_example())\n    end_time = time.time()\n    print(f\"Asyncio time: {end_time - start_time:.4f} seconds\")\n</code></pre>"},{"location":"lab2/#database","title":"database","text":"<pre><code>from sqlmodel import SQLModel, create_engine, Session, Field\n\ndb_url = 'postgresql://postgres:123@localhost/db_lab2'\nengine = create_engine(db_url, echo=False)\n\nclass Site(SQLModel, table=True):\n    id: int = Field(primary_key=True)\n    url: str\n    title: str\n    method: str\n\ndef get_session() -&gt; Session:\n    return Session(bind=engine)\n\ndef init_db():\n    SQLModel.metadata.create_all(engine)\n</code></pre>"},{"location":"lab2/#_2","title":"\u0412\u044b\u0432\u043e\u0434","text":"<p>\u0412\u0440\u0435\u043c\u044f</p> <ul> <li> <p>threading - 0.6671 \u0441\u0435\u043a</p> </li> <li> <p>multiprocessing - 3.3805 \u0441\u0435\u043a</p> </li> <li> <p>async - 0.7907 \u0441\u0435\u043a</p> </li> </ul> <p>\u0417\u0430\u0434\u0430\u0447\u0430 \u0434\u043b\u044f \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f \u0440\u0430\u0437\u043d\u044b\u0445 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b, \u043d\u043e \u043d\u0430 \u0442\u0430\u043a\u043e\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u0443\u0432\u0438\u0434\u0435\u0442\u044c, \u0447\u0442\u043e \u0434\u043b\u044f \u043c\u0430\u043b\u0435\u043d\u044c\u043a\u043e\u0433\u043e \u043e\u0431\u044c\u0435\u043c\u0430 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043d\u0435\u0442 \u0441\u043c\u044b\u0441\u043b\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c multiprocessing \u0438 \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u043f\u043e \u043e\u0447\u0435\u0432\u0438\u0434\u043d\u044b\u043c \u043f\u0440\u0438\u0447\u0438\u043d\u0430\u043c treading \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0431\u044b\u0441\u0442\u0440\u0435\u0435 \u0447\u0435\u043c async</p>"},{"location":"lab3/","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 - 3","text":""},{"location":"lab3/#_1","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435","text":"<p>\u041d\u0430\u0443\u0447\u0438\u0442\u044c\u0441\u044f \u0443\u043f\u0430\u043a\u043e\u0432\u044b\u0432\u0430\u0442\u044c FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0432 Docker, \u0438\u043d\u0442\u0435\u0433\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u0430\u0440\u0441\u0435\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u0431\u0430\u0437\u043e\u0439 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0432\u044b\u0437\u044b\u0432\u0430\u0442\u044c \u043f\u0430\u0440\u0441\u0435\u0440 \u0447\u0435\u0440\u0435\u0437 API \u0438 \u043e\u0447\u0435\u0440\u0435\u0434\u044c.</p>"},{"location":"lab3/#_2","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0430\u0440\u0441\u0435\u0440\u0430","text":"<pre><code>from fastapi import APIRouter, Depends\nfrom connection import get_session\nfrom models import Site\nimport aiohttp\nfrom bs4 import BeautifulSoup\n\nrouter = APIRouter()\n\nasync def parse_and_save_async(url: str, session) -&gt; str:\n    async with aiohttp.ClientSession() as aio_session:\n        response = await fetch_page(aio_session, url)\n        soup = BeautifulSoup(response, 'html.parser')\n        title_tag = soup.title\n        if title_tag:\n            title = title_tag.string\n        else:\n            title = \"\"  # or some default value\n        site = Site(url=url, title=title, method='async')\n        session.add(site)\n        session.commit()\n        session.refresh(site)\n        return title  # Return the title value\nasync def fetch_page(session: aiohttp.ClientSession, url: str) -&gt; str:\n    async with session.get(url, ssl=False) as response:\n        return await response.text()\n\n@router.post(\"/parse\")\nasync def parse(url: str, session=Depends(get_session)):\n        data = await parse_and_save_async(url, session)\n        return {\"data\": data}\n</code></pre>"},{"location":"lab3/#docker-compose","title":"docker-compose","text":"<pre><code>services:\n  db:\n    image: postgres\n    container_name: db\n    restart: always\n    environment:\n      - POSTGRES_PASSWORD=123\n      - POSTGRES_USER=postgres\n      - POSTGRES_DB=lab3\n      - POSTGRES_PORT=5432\n    volumes:\n      - db-data:/var/lib/postgresql/data\n    ports:\n      - \"5432:5432\"\n    networks:\n      - my_network\n\n  app:\n    container_name: app\n    build:\n      context: .\n    env_file: .env\n    depends_on:\n      - db\n      - redis\n    ports:\n      - \"8000:8000\"\n    command: uvicorn main:app --host 0.0.0.0 --port 8000\n    restart: always\n    networks:\n      - my_network\n\n  celery_task:\n    container_name: celery_task\n    build:\n      context: ./second_task\n    env_file: .env\n    depends_on:\n      - db\n      - redis\n    ports:\n      - \"8001:8001\"\n    command: uvicorn main:app --host 0.0.0.0 --port 8001\n    restart: always\n    networks:\n      - my_network\n    dns:\n      - 8.8.8.8\n      - 8.8.4.4\n\n  celery:\n    build:\n      context: ./second_task\n    container_name: celery\n    command: celery -A parse worker --loglevel=info\n    restart: always\n    depends_on:\n      - redis\n      - db\n    environment:\n      - CELERY_BROKER_URL=redis://redis:6379/0\n      - CELERY_RESULT_BACKEND=redis://redis:6379/0\n    networks:\n      - my_network\n\n  redis:\n    image: redis\n    ports:\n      - \"6379:6379\"\n    networks:\n      - my_network\n\nvolumes:\n  db-data:\nnetworks:\n  my_network:\n</code></pre>"},{"location":"lab3/#dockerfile","title":"Dockerfile","text":"<pre><code>FROM python:3.9-slim\n\nWORKDIR /lab3\n\nCOPY requirements.txt .\n\nRUN pip install -r requirements.txt\n\nCOPY . .\n\nEXPOSE 8000\n\nCMD [\"uvicorn\", \"main:app\", \"--host\", \"localhost\", \"--port\", \"8000\"]\n</code></pre>"},{"location":"lab3/#celery","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f celery","text":"<p>celery_app.py</p> <pre><code>from celery import Celery\n\ncelery_app = Celery(\"tasks\", broker=\"redis://redis:6379/0\", backend=\"redis://redis:6379/0\")\n\n\ncelery_app.autodiscover_tasks(['parse'])\n</code></pre> <p>parse.py</p> <pre><code>from celery_app import celery_app\nfrom connection import get_session, Site\nimport requests\nfrom bs4 import BeautifulSoup\n\n@celery_app.task(name=\"parse_and_save\")\ndef parse_and_save(url):\n    with get_session() as session:\n        response = requests.get(url)\n        soup = BeautifulSoup(response.content, 'html.parser')\n        title = soup.title.string if soup.title else 'No title'\n        new_article = Site(url=url, title=title, method=\"GET\")\n        session.add(new_article)\n        session.commit()\n</code></pre> <p>main.py</p> <pre><code>from fastapi import FastAPI, BackgroundTasks\nfrom connection import init_db\nfrom celery_app import celery_app\nfrom sqlmodel import Session, select\nfrom connection import engine, Site\n\napp = FastAPI()\n\n@app.on_event(\"startup\")\ndef on_startup():\n    init_db()\n\n@app.post(\"/parse\")\ndef parse(url: str, background_tasks: BackgroundTasks):\n    background_tasks.add_task(celery_app.send_task, \"parse_and_save\", args=(url,))\n    return {\"message\": \"Parsing task triggered\"}\n\n@app.get(\"/results\")\ndef get_results():\n    with Session(engine) as session:\n        results = session.exec(select(Site)).all()\n    return results\n</code></pre>"}]}